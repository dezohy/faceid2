import cv2
import os
import numpy as np

subjects = ["", "Anastasiia"]  # Only interested in Anastasiia


def detect_face(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    face_cascade = cv2.CascadeClassifier('opencv-files/lbpcascade_frontalface.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5)
    if len(faces) == 0:
        return None, None
    (x, y, w, h) = faces[0]
    return gray[y:y + w, x:x + h], faces[0]


def prepare_training_data(data_folder_path):
    dir_name = "s1"  # Specific directory for Anastasiia
    subject_dir_path = os.path.join(data_folder_path, dir_name)
    if not os.path.isdir(subject_dir_path):
        print(f"No directory found for training data at {subject_dir_path}")
        return [], []

    faces = []
    labels = []
    subject_images_names = os.listdir(subject_dir_path)
    for image_name in subject_images_names:
        if image_name.startswith("."):
            continue
        image_path = os.path.join(subject_dir_path, image_name)
        image = cv2.imread(image_path)
        face, rect = detect_face(image)
        if face is not None:
            faces.append(face)
            labels.append(1)  # Label 1 for Anastasiia

    return faces, labels


print("Preparing data...")
faces, labels = prepare_training_data("training-data")
print("Data prepared")

face_recognizer = cv2.face.LBPHFaceRecognizer_create()
face_recognizer.train(faces, np.array(labels))


def draw_rectangle(img, rect):
    (x, y, w, h) = rect
    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)


def draw_text(img, text, x, y):
    cv2.putText(img, text, (x, y), cv2.FONT_HERSHEY_PLAIN, 1.5, (0, 255, 0), 2)


def predict(frame):
    face, rect = detect_face(frame)
    if face is not None:
        label, confidence = face_recognizer.predict(face)
        if label == 1 and confidence < 50:  # Adjust confidence threshold as necessary
            draw_rectangle(frame, rect)
            draw_text(frame, f"{subjects[label]} recognized", rect[0], rect[1] - 5)
        else:
            draw_text(frame, "Unknown", rect[0], rect[1] - 5)
    return frame


cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame = predict(frame)
    cv2.imshow("Face Recognizer", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
